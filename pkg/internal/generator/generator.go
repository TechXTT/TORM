package generator

import (
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"text/template"
	// adjust to actual Prisma Go client import path
)

// formatFile formats the given file using gofmt.
func formatFile(filePath string) error {
	cmd := exec.Command("go", "fmt", filePath)
	return cmd.Run()
}

var modelTemplate = template.Must(template.New("model").
	Funcs(template.FuncMap{
		"hasTime": func(fields []Field) bool {
			for _, f := range fields {
				if f.Type == "time.Time" {
					return true
				}
			}
			return false
		},
		"hasUUID": func(fields []Field) bool {
			for _, f := range fields {
				if f.Type == "uuid.UUID" {
					return true
				}
			}
			return false
		},
		"goType": func(t string) string {
			if strings.HasSuffix(t, "[]") {
				return "[]" + strings.TrimSuffix(t, "[]")
			}
			return t
		},
	}).
	Parse(`package models

// Code generated by TORM; DO NOT EDIT.
		
import (
{{- if hasUUID .Fields }}
    "github.com/google/uuid"
{{- end }}
{{- if hasTime .Fields }}
    "time"
{{- end }}
    "context"
    "github.com/TechXTT/TORM/prisma"
)

// Client is a global Prisma DB client, ready to use.
var Client = prisma.NewClient()

func init() {
    if err := Client.Prisma.Connect(context.Background()); err != nil {
        panic(fmt.Sprintf("failed to connect to DB: %v", err))
    }
}

type {{ .Name }} struct {
{{- range .Fields }}
    {{ .Name }} {{ goType .Type }}
{{- end }}
}
`))

// Generate reads a Prisma schema and outputs Go client code.
func Generate(schemaPath, outDir string) error {
	data, err := os.ReadFile(schemaPath)
	if err != nil {
		return err
	}
	ast, err := ParseSchema(data)
	if err != nil {
		return err
	}
	fmt.Printf("Parsed %d entities\n", len(ast.Entities))
	if err := os.MkdirAll(outDir, 0o755); err != nil {
		return err
	}

	// generate one file per entity
	for _, ent := range ast.Entities {
		filePath := filepath.Join(outDir, strings.ToLower(ent.Name)+".go")
		f, err := os.Create(filePath)
		if err != nil {
			return err
		}
		defer f.Close()

		if err := modelTemplate.Execute(f, ent); err != nil {
			return err
		}
		if err := f.Close(); err != nil {
			return err
		}

		// format the file
		if err := formatFile(filePath); err != nil {
			return err
		}

		fmt.Printf("Generated model %s\n", filePath)
	}

	return nil
}
