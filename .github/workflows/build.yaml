name: Go Application CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: '1.23'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Lint
      run: |
        go install golang.org/x/lint/golint@latest
        golint ./...

    # - name: Test
    #   env:
    #     DATABASE_URL: postgres://postgres:password@localhost:5432/postgres?sslmode=disable
    #   run: go test ./pkg/migrate ./internal/core -v

    - name: Build
      run: |
        go build -o torm ./cmd/torm
      env:
        CGO_ENABLED: 0


  release:
    needs: build
    if: startsWith(github.event.head_commit.message, 'Release ')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Extract version from commit message
        id: extract_version
        run: |
          # Extract the version using the GitHub context variable
          VERSION=$(echo "${{ github.event.head_commit.message }}" | sed -n 's/^Release \(.*\)$/\1/p')
          # Write the version to the GitHub environment file for later steps
          echo "VERSION=${VERSION}" >> "$GITHUB_ENV"
          # Output the extracted version to the logs for debugging
          echo "Extracted version: ${VERSION}"

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          draft: false
          prerelease: ${{ contains(env.VERSION, '-alpha') || contains(env.VERSION, '-beta') }}
